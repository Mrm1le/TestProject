# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - cpp/dev
      - cpp/dev_switch
      - cpp/main
  tags:
    include:
      - '*'

variables:
  project-name: $(System.Teamproject)
  repo-name: $(Build.Repository.Name)
  scan_allowlist_file: maf_planning_dev-mpilot.csv
  MODULE_LIST_GIT_BRANCH: maf2.2.1_SW030_RP19/Deliver_sop
  BUILD_MODULE_LIST: planning

resources:
  containers:
  - container: inform
    endpoint: artifactory
    image: artifactory.momenta.works/docker-msd/sonarqube-inform:v0.0.1
    options: -i -t 
  - container: scanner
    endpoint: artifactory
    image: artifactory.momenta.works/docker-msd/sonar-scanner-client:20211013-v1.0
  - container: ci
    endpoint: artifactory
    image: artifactory.momenta.works/docker-msd/mfrunner:v1.0-20210325
    options: -i -t
  - container: pnc
    endpoint: artifactory
    image: artifactory.momenta.works/docker-mpilot-highway-dev/for-new-planner-build:v1.0.3
    options: -i -t
  - container: conan-devcar
    endpoint: artifactory
    image: artifactory.momenta.works/docker-momenta/build_env_devcar_momenta_cmake:v0.0.2
    options: -i -t 
  - container: parasoft
    endpoint: artifactory
    image: artifactory.momenta.works/docker-momenta/build_env_devcar_momenta_cmake_with_cuda_11.1_parasoft:v0.0.13
    options: -i -t -e BUILD_ENV_ID=devcar_with_cuda11.1 -e BENV_ID=devcar_with_cuda11.1 -e _MODO_DOCKER_TAG=artifactory.momenta.works/docker-momenta/build_env_devcar_momenta_cmake_with_cuda_11.1:v0.0.13
  repositories:
    - repository: templates
      type: git
      name: qa/m-static-code-check
      ref: refs/heads/master_mfs
    - repository: mf_system
      type: git
      name: maf/mf_system
      ref: refs/heads/dev


stages:
- stage: format
  jobs:
  - job: format
    workspace:
      clean: all
    container: ci
    # pool:
    #   name: hw-agents
    displayName: 'format'
    steps:
      - checkout: self
        fetchDepth: 1
        clean: true
        lfs: true
        submodules: recursive
        persistCredentials: true

      - bash:
          cd $(Build.SourcesDirectory)
          python .ci/format.py check
        displayName: 'execute_format'
        failOnStderr: true
    condition: ne(variables['Build.Reason'], 'Schedule')

- template: pipelines.staticcheck-notification.yml@templates

- stage: auto_inform
  jobs:
  - job: auto_inform
    # pool:
    #   name: hw-agents
    steps:
      - bash: |
          username="$(Build.RequestedFor)"

          declare -a arr
          index=0
          for i in $(echo $username | awk '{print $1,$2}')
          do
              arr[$index]=$i
              let "index+=1"
          done

          typeset -l user
          user="${arr[1]}${arr[0]}"
          curl --location --request POST 'http://simulation.momenta.works/api/v1/msg/wechat_msg' \
               --header 'Content-Type: application/json' \
               -d "{
                  \"user_list\": [\"$user\"],
                  \"msg_content\": \"触发的存储库名字: $(Build.Repository.Name) \n由 $(Build.RequestedFor) 触发Pull-Request, 当前代码扫描已完成。\nPipeline执行链接（需用浏览器打开）：https://devops.momenta.works/Momenta/$(project-name)/_build/results?buildId=$(Build.BuildId)&view=results \nSonarqube扫描报告地址：http://sonarqube.momenta.works/dashboard?branch=$(Build.SourceBranch)&id=$(Build.Repository.Name) \"
                }"
        displayName: 'static_check_report_inform'

# - stage: build
#   # dependsOn: 'auto_inform'
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
#   jobs:
#   - job: build
#     workspace:
#       clean:
#         all
#     container: conan-devcar
#     # pool:
#     #   name: hw-agents
#     displayName: 'build'
#     steps:
#       - checkout: self
#         clean: true
#         lfs: true
#         submodules: recursive
#         persistCredentials: true
#       - bash: |
#           set -e
#           sed -i 's/set(PNC_ENABLE_TEST OFF)/set(PNC_ENABLE_TEST ON)/g' CMakeLists.txt
#           make build
#         displayName: 'execute_compile'
#         failOnStderr: false

#       - task: PublishBuildArtifacts@1
#         inputs:
#           PathtoPublish: '$(Build.SourcesDirectory)/build/'
#           ArtifactName: 'binaries'
#           publishLocation: 'Container'

# - stage: test
#   dependsOn: 'build'
#   variables:
#     binaries_path: "$(Build.SourcesDirectory)/binaries"
#   jobs:
#   - job: cpp_unittest
#     workspace:
#       clean: all
#     container: pnc
#     # pool:
#     #   name: 'msd'
#     #   demands:
#     #   - verify -equals mfruntime
#     displayName: 'cpp unittest'
#     steps:
#       - checkout: none

#       - task: DownloadBuildArtifacts@0
#         inputs:
#           artifactName: 'binaries'
#           downloadType: 'single'
#           downloadPath: '$(Build.SourcesDirectory)'

#       - bash: |
#           echo "binaries_path"
#           echo $(binaries_path)
#           ls -l $(binaries_path)
#           ls -l $(binaries_path)/test
#           ls -l $(binaries_path)/test/unittest
#           ldd $(binaries_path)/test/unittest/pnc_unittest
#           chmod o+x -R $(binaries_path)/test
#           cd $(binaries_path)/test/unittest
#           ./pnc_unittest
#         displayName: 'execute_unitest'
#     condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))

# - stage: gcov_coverage
#   dependsOn: 'build'
#   variables:
#     binaries_path: "$(Build.SourcesDirectory)/binaries"
#   jobs:
#   - job: gcov_coverage
#     workspace:
#       clean: all
#     container: ci
#     # pool:
#     #   name: 'msd'
#     #   demands:
#     #   - verify -equals mfruntime
#     displayName: 'gcov_coverage'
#     steps:
#       - checkout: none

#       - task: DownloadBuildArtifacts@0
#         inputs:
#           artifactName: 'binaries'
#           downloadType: 'single'
#           downloadPath: '$(Build.SourcesDirectory)'

#       - bash: |
#           set -x
#           command -v lcov || apt-get -y install lcov
#           echo "binaries_path"
#           ls -l $(binaries_path)
#           cd $(binaries_path)
#           lcov --list ./test/unittest/coverage.filter
#         displayName: 'generate_coverage_report'

#       - task: PublishBuildArtifacts@1
#         inputs:
#           PathtoPublish: '$(Build.SourcesDirectory)/binaries/test/unittest/coverage'
#           ArtifactName: '$(Agent.JobName)_$(Build.SourceBranch)_coverage_html_report'
#           publishLocation: 'Container'

#       - task: PublishBuildArtifacts@1
#         inputs:
#           PathtoPublish: '$(Build.SourcesDirectory)/binaries/test/unittest/coverage.total'
#           ArtifactName: '$(Agent.JobName)_$(Build.SourceBranch)_coverage_info_file'
#           publishLocation: 'Container'

#       - task: PublishCodeCoverageResults@1
#         inputs:
#           summaryFileLocation: $(Build.SourcesDirectory)/binaries/test/unittest/coverage/index-sort-f.html
- template: parasoft.yml@templates
  parameters:
    exclude_lst: exclude_maf_planning.lst
    time_out_minutes: 120
    pool_name: parasoft
