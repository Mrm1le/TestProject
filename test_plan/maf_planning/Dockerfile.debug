# syntax=docker/dockerfile:experimental
ARG MSQUARE_PNC_BASE=artifactory.momenta.works/docker-msd-dev/msquare-pnc-base:v2.0.0
ARG IMAGE_MOMENTA_COMMON=artifactory.momenta.works/docker-msd-dev/maf-common:v1.3.0-20210509.11
ARG RUNTIME_BASE=ubuntu:16.04

# ========================================
    
FROM ${IMAGE_MOMENTA_COMMON} as dep_proper
# ====================================== build stage
FROM ${MSQUARE_PNC_BASE} AS build

COPY . ${CONTAINER_AUTO_WS}/src/maf_planning

COPY --from=dep_proper ${CONTAINER_AUTO_WS}/ ${CONTAINER_AUTO_WS}/

RUN /bin/bash -c "source /opt/ros/kinetic/setup.bash && source ${CONTAINER_AUTO_WS}/install/setup.bash && \
    catkin_make -DCMAKE_BUILD_TYPE=RelWithDebInfo -C ${CONTAINER_AUTO_WS} -DENABLE_MSIM_PROVIDER=OFF -j4 install"

RUN rm -rf ${CONTAINER_AUTO_WS}/install/include \
    ${CONTAINER_AUTO_WS}/install/mfrproto/code/include \
    ${CONTAINER_AUTO_WS}/install/mfrproto/code/py \
    ${CONTAINER_AUTO_WS}/install/mfrproto/code/src \
    ${CONTAINER_AUTO_WS}/install/mfrproto/proto \
    ${CONTAINER_AUTO_WS}/install/mfrproto/temporary \
    ${CONTAINER_AUTO_WS}/install/lib/python2.7 \
    ${CONTAINER_AUTO_WS}/install/lib/pkgconfig  

RUN mv ${CONTAINER_AUTO_WS}/install/share ${CONTAINER_AUTO_WS}/install/shareold && \
    mkdir ${CONTAINER_AUTO_WS}/install/share && \
#mv ${CONTAINER_AUTO_WS}/install/shareold/msquare_pnc_ros ${CONTAINER_AUTO_WS}/install/share && \
#rm -rf ${CONTAINER_AUTO_WS}/install/share/msquare_pnc_ros/cmake && \
#rm -rf ${CONTAINER_AUTO_WS}/install/shareold && \
#mkdir -p ${CONTAINER_AUTO_WS}/tmp/lib && \
#mv ${CONTAINER_AUTO_WS}/install/lib/libmsquare_pnc.so ${CONTAINER_AUTO_WS}/tmp/lib
    mv ${CONTAINER_AUTO_WS}/install/shareold/planning_mfr ${CONTAINER_AUTO_WS}/install/share/planning_mfr && \
    mv ${CONTAINER_AUTO_WS}/install/shareold/common_thirdparty ${CONTAINER_AUTO_WS}/install/share/common_thirdparty && \
    rm -rf ${CONTAINER_AUTO_WS}/install/share/planning_mfr/cmake && \
    rm -rf ${CONTAINER_AUTO_WS}/install/share/common_thirdparty/cmake && \
    rm -rf ${CONTAINER_AUTO_WS}/install/shareold


# =================================== runtime stage
FROM ${RUNTIME_BASE} AS runtime-stage
LABEL maintainer="Simulation <simulator@momenta.ai>"

# For language setting and localization setting
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# All operations during the build are non interactive
ARG DEBIAN_FRONTEND=noninteractive

# Workspace setup
WORKDIR /root

# Add software package and CA certificate using HTTPS transmission
# Then replace the software source by sed
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates apt-transport-https \
    && rm -rf /var/lib/apt/lists/*

# Mirrors
RUN sed -i "s#http://archive.ubuntu.com/#https://mirrors.aliyun.com/#" /etc/apt/sources.list \
 && sed -i "s#http://security.ubuntu.com/#https://mirrors.aliyun.com/#" /etc/apt/sources.list \
 && echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros-latest.list \
 && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# ping in prepare.sh 
RUN apt-get update \
 && apt-get install -y \
        iputils-ping \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

# # when the MFR used, just cancle comment out 
# # make protobuf, required for MFR
# # -------------------------------------------------

# # install make protobuf tools
# RUN apt-get update \
#  && apt-get install -y \
#         wget software-properties-common curl \
#         autoconf automake libtool g++ unzip \
#  && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Update cmake && install  
# RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
#         | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
#  && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main' \
#  && apt-get update \
#  && apt-get install -y cmake=3.15.0-0kitware1 cmake-data=3.15.0-0kitware1 \
#  && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Protobuf 
# RUN curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-all-3.12.3.tar.gz \
#  && tar -zxvf protobuf-all-3.12.3.tar.gz \
#  && rm protobuf-all-3.12.3.tar.gz \
#  && mv protobuf-3.12.3 protobuf \
#  && cd protobuf \
#  && ./configure \
#  && make -j8 \
#  && make install \
#  && make clean \
#  && ldconfig \
#  && cd .. && rm -rf ./protobuf

# # ----------------------------------------------

ENV CONTAINER_AUTO_WS /home/ros/catkin_ws

# When ROS not used, just comment out  ROS related steps
# ROS will be replaced by MFR
# -------------------------------------------------

# install ROS
RUN apt-get update \
 && apt-get install -y \
        ros-kinetic-ros-base \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

# Disable ROS msg generation for languages other than C++/Python
ENV ROS_LANG_DISABLE=geneus:genlisp:gennodejs
# ROS basic settings
ENV ROS_MASTER_IP 127.0.0.1
ENV ROS_MASTER_PORT 11311
ENV ROS_MASTER_URI http://${ROS_MASTER_IP}:${ROS_MASTER_PORT}
ENV ROS_IP 127.0.0.1
ENV ROS_PORT 11311
ENV MSQUARE_PNC_PROVIDER_ADDRESS 0.0.0.0:20001
ENV MSQUARE_PNC_LOG_LEVEL INFO

STOPSIGNAL SIGINT

# Executable files change frequently , placed in the back
# Copy the executable file and built dependency to the current image
COPY --from=build ${CONTAINER_AUTO_WS}/install ${CONTAINER_AUTO_WS}/install
#COPY --from=build ${CONTAINER_AUTO_WS}/tmp/lib/libmsquare_pnc.so ${CONTAINER_AUTO_WS}/install/lib/
COPY entrypoint.sh /entrypoint.sh
COPY start.sh /start.sh

ENTRYPOINT ["/entrypoint.sh"]

#===================================
FROM runtime-stage AS provider-stage
CMD ["roslaunch", "msquare_pnc_ros", "debug.launch", "msim_provider:=true"]

#==============================
FROM runtime-stage AS ros-stage
ENV PACKAGE_PATH ${CONTAINER_AUTO_WS}/install/share/planning_mfr
ENV CMAKE_BINARY_PATH ${CONTAINER_AUTO_WS}/install
ENV APA_PLANNING_RESOURCE_PATH ${PACKAGE_PATH}/resource
ENV LDP_PLANNING_RESOURCE_PATH ${PACKAGE_PATH}/resource
ENV SBP_PLANNING_RESOURCE_PATH ${PACKAGE_PATH}/resource
ENV MFR_RELEASE_PATH ${CONTAINER_AUTO_WS}/install/share/common_thirdparty/mfr-release
CMD ["source /start.sh"]
