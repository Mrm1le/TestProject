# syntax=docker/dockerfile:experimental
ARG RUNTIME_BASE=ubuntu:16.04

FROM ${RUNTIME_BASE} AS runtime-stage

# For language setting and localization setting
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# All operations during the build are non interactive
ARG DEBIAN_FRONTEND=noninteractive

# Workspace setup
WORKDIR /root

# Add software package and CA certificate using HTTPS transmission
# Then replace the software source by sed
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates apt-transport-https \
    && rm -rf /var/lib/apt/lists/*

# Mirrors
RUN sed -i "s#http://archive.ubuntu.com/#https://mirrors.aliyun.com/#" /etc/apt/sources.list \
 && sed -i "s#http://security.ubuntu.com/#https://mirrors.aliyun.com/#" /etc/apt/sources.list \
 && echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros-latest.list \
 && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# ping in prepare.sh 
RUN apt-get update \
 && apt-get install -y \
        iputils-ping wget tar \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

# # when the MFR used, just cancle comment out 
# # make protobuf, required for MFR
# # -------------------------------------------------

# # install make protobuf tools
# RUN apt-get update \
#  && apt-get install -y \
#         wget software-properties-common curl \
#         autoconf automake libtool g++ unzip \
#  && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Update cmake && install  
# RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
#         | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
#  && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main' \
#  && apt-get update \
#  && apt-get install -y cmake=3.15.0-0kitware1 cmake-data=3.15.0-0kitware1 \
#  && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Protobuf 
# RUN curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-all-3.12.3.tar.gz \
#  && tar -zxvf protobuf-all-3.12.3.tar.gz \
#  && rm protobuf-all-3.12.3.tar.gz \
#  && mv protobuf-3.12.3 protobuf \
#  && cd protobuf \
#  && ./configure \
#  && make -j8 \
#  && make install \
#  && make clean \
#  && ldconfig \
#  && cd .. && rm -rf ./protobuf

# # ----------------------------------------------
# install ROS
RUN apt-get update \
 && apt-get install -y \
        ros-kinetic-ros-base \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN apt update && apt install -y curl libsuitesparse-dev git

# install glog gflag
RUN wget -O v2.2.0.tar.gz https://github.com/gflags/gflags/archive/v2.2.0.tar.gz \
 && tar xzf v2.2.0.tar.gz && mkdir gflags-2.2.0/build && cd gflags-2.2.0/build \
 && CXXFLAGS="-fPIC" cmake -DBUILD_SHARED_LIBS=true .. \
 && make -j8 && make install \
 && rm -rf v2.2.0.tar.gz* gflags-2.2.0

RUN wget -O v0.3.5.tar.gz https://github.com/google/glog/archive/v0.3.5.tar.gz \
 && tar xzf v0.3.5.tar.gz && cd glog-0.3.5 \
 && ./configure --enable-shared \
 && make CXXFLAGS='-Wno-sign-compare -Wno-unused-local-typedefs -fPIC -D_START_GOOGLE_NAMESPACE_="namespace google {" -D_END_GOOGLE_NAMESPACE_="}" -DGOOGLE_NAMESPACE="google" -DHAVE_PTHREAD -DHAVE_SYS_UTSNAME_H -DHAVE_SYS_SYSCALL_H -DHAVE_SYS_TIME_H -DHAVE_STDINT_H -DHAVE_STRING_H -DHAVE_PREAD -DHAVE_FCNTL -DHAVE_SYS_TYPES_H -DHAVE_SYSLOG_H -DHAVE_LIB_GFLAGS -DHAVE_UNISTD_H' LDFLAGS="-L/usr/local/lib" \
 && make install \
 && rm -rf v0.3.5.tar.gz* glog-0.3.5

# Eigen 3.3.7
RUN curl https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz -o /eigen.tar.gz && tar xvzf /eigen.tar.gz -C / && \
    cd /eigen-3.3.7 && mkdir build && cd build && cmake -D CMAKE_BUILD_TYPE=Release .. && make install && \
    rm -rf /eigen-3.3.7 && rm /eigen.tar.gz

# install ceres
RUN git clone https://ceres-solver.googlesource.com/ceres-solver /ceres-solver \
 && cd /ceres-solver && mkdir build && cd build \
 && cmake -D CMAKE_BUILD_TYPE=Release .. && make -j3 && make install \
 && rm -rf /ceres-solver

# Disable ROS msg generation for languages other than C++/Python
ENV ROS_LANG_DISABLE=geneus:genlisp:gennodejs
# ROS basic settings
ENV ROS_MASTER_IP 127.0.0.1
ENV ROS_MASTER_PORT 11311
ENV ROS_MASTER_URI http://${ROS_MASTER_IP}:${ROS_MASTER_PORT}
ENV ROS_IP 127.0.0.1
ENV ROS_PORT 11311

# ------------------------------------------------
